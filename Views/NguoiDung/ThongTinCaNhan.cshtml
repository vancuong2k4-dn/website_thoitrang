@model LTW.Models.KhachHang
@{
    ViewBag.Title = "Thông Tin Cá Nhân";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="x-box x-shadow">
        <div class="profile-container">
            <!-- Tabs Navigation -->
            <div class="tabs-nav">
                <button class="tab-btn active" onclick="switchTab('profile-info')">
                    <i class="fas fa-user"></i>
                    Thông tin cá nhân
                </button>
                <button class="tab-btn" onclick="switchTab('change-password')">
                    <i class="fas fa-key"></i>
                    Đổi mật khẩu
                </button>
            </div>

            <!-- Tab Content -->
            <div class="tab-content">
                <!-- Thông tin cá nhân -->
                <div class="tab-pane active" id="profile-info">
                    <div class="form-container">
                        <h3>Thông tin cá nhân</h3>
                        @using (Html.BeginForm("CapNhatThongTin", "NguoiDung", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.MaKH)
                            <div class="form-group">
                                <label>Tên đăng nhập</label>
                                @Html.TextBoxFor(m => m.UserName, new { @class = "form-input", @readonly = "readonly" })
                            </div>
                            <div class="form-group">
                                <label>Họ và tên</label>
                                @Html.TextBoxFor(m => m.TenKhachHang, new { @class = "form-input" })
                                @Html.ValidationMessageFor(m => m.TenKhachHang, "", new { @class = "error-message" })
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-input", type = "email" })
                                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "error-message" })
                            </div>
                            <div class="form-group">
                                <label>Số điện thoại</label>
                                @Html.TextBoxFor(m => m.SDT, new { @class = "form-input" })
                                @Html.ValidationMessageFor(m => m.SDT, "", new { @class = "error-message" })
                            </div>
                            <div class="form-group">
                                <label>Địa chỉ</label>
                                @Html.TextAreaFor(m => m.DiaChi, new { @class = "form-input", rows = "3" })
                                @Html.ValidationMessageFor(m => m.DiaChi, "", new { @class = "error-message" })
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn-submit">
                                    <i class="fas fa-save"></i>
                                    Cập nhật thông tin
                                </button>
                            </div>
                        }
                    </div>
                </div>

                <!-- Đổi mật khẩu -->
                <div class="tab-pane" id="change-password">
                    <div class="form-container">
                        <h3>Đổi mật khẩu</h3>
                        @using (Html.BeginForm("DoiMatKhau", "NguoiDung", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <label>Mật khẩu hiện tại</label>
                                <input type="password" name="currentPassword" class="form-input" required>
                            </div>
                            <div class="form-group">
                                <label>Mật khẩu mới</label>
                                <input type="password" name="newPassword" class="form-input" required>
                            </div>
                            <div class="form-group">
                                <label>Xác nhận mật khẩu mới</label>
                                <input type="password" name="confirmPassword" class="form-input" required>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn-submit">
                                    <i class="fas fa-key"></i>
                                    Đổi mật khẩu
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .x-box {
        background: #f9f4dd;
        padding: 30px;
        margin: 20px 0;
        border-radius: 8px;
    }

    .x-shadow {
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .profile-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .tabs-nav {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
    }

    .tab-btn {
        padding: 12px 24px;
        background: none;
        border: none;
        border-bottom: 2px solid transparent;
        cursor: pointer;
        font-weight: 500;
        color: #666;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .tab-btn i {
            font-size: 16px;
        }

        .tab-btn.active {
            color: #333;
            border-bottom-color: #333;
        }

    .tab-content {
        background-color: transparent;
        padding: 30px;
        border-radius: 8px;
    }

    .tab-pane {
        display: none;
    }

        .tab-pane.active {
            display: block;
        }

    .form-container h3 {
        margin-bottom: 25px;
        color: #333;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }

    .form-input {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 15px;
    }

        .form-input:focus {
            outline: none;
            border-color: #333;
        }

    textarea.form-input {
        resize: vertical;
        min-height: 100px;
    }

    .error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
    }

    .form-actions {
        margin-top: 30px;
    }

    .btn-submit {
        padding: 12px 24px;
        background: #333;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .btn-submit:hover {
            background: #555;
        }

    /* Alert styles */
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>

<script>
    function switchTab(tabId) {
        // Ẩn tất cả các tab
        document.querySelectorAll('.tab-pane').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // Hiển thị tab được chọn
        document.getElementById(tabId).classList.add('active');
        event.currentTarget.classList.add('active');
    }

    // Hiển thị thông báo
    @if (TempData["Success"] != null)
    {
        <text>
        showAlert('success', '@TempData["Success"]');
        </text>
    }

    @if (TempData["Error"] != null)
    {
        <text>
        showAlert('danger', '@TempData["Error"]');
        </text>
    }

    function showAlert(type, message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerHTML = message;

        document.querySelector('.profile-container').insertBefore(alertDiv, document.querySelector('.tabs-nav'));

        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }
</script>